name: Release (tag)
permissions:
  contents: write # Allow write access to contents for creating releases
on:
  push:
    tags:
      - 'v*'
jobs:
  build:
    name: Build assets â€¢ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      BUILD_TYPE: RelWithDebInfo
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4      
      - name: Install deps (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake build-essential
      - name: Configure (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
      - name: Build (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: cmake --build build --parallel
      - name: Test (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: ctest --test-dir build --output-on-failure
      - name: Configure (Windows)
        if: matrix.os == 'windows-latest'
        run: cmake -S . -B build -G "Visual Studio 17 2022" -A x64
      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel
      - name: Test (Windows)
        if: matrix.os == 'windows-latest'
        run: ctest --test-dir build -C ${{ env.BUILD_TYPE }} --output-on-failure
      - name: Package artifacts
        shell: bash
        run: |
          mkdir -p dist
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a dist/project-${{ github.ref_name }}-windows.zip ./build/**/* -x!**/CMakeFiles -x!**/*.obj || true
          else
            tar -czf dist/project-${{ github.ref_name }}-linux.tar.gz -C build .
          fi
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: assets-${{ matrix.os }}
          path: dist/**
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: assets-*
          merge-multiple: true
      - name: Prepare release notes
        id: notes
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"
          for f in "changelogs/${TAG}.md" "CHANGELOGS/${TAG}.md" "${TAG}.md"; do
            if [[ -f "$f" ]]; then
              echo "body<<EOF" >> $GITHUB_OUTPUT
              cat "$f" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          echo "body=Release $TAG" >> $GITHUB_OUTPUT
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: true
          body: ${{ steps.notes.outputs.body }}
          files: |
            dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
