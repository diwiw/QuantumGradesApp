name: Build (CMake + CTest)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.os }} â€¢ build & test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Ubuntu ----------
      - name: Install deps (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake build-essential ccache libcurl4-openssl-dev

      - name: Setup ccache (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p ~/.cache/ccache
          mkdir -p ~/.ccache
          echo 'max_size = 500M' > ~/.ccache/ccache.conf

      - name: Cache ccache (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake', '**/*.hpp', '**/*.h', '**/*.cpp') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Configure (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache

      - name: Build (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: cmake --build build --parallel

      - name: Test (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: ctest --test-dir build --output-on-failure

      - name: ccache stats (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: ccache -s || true

      - name: Show ccache stats (Ubuntu)
        if: always() && runner.os == 'Ubuntu'
        run: |
          echo "=== CCACHE STATS ==="        
          ccache --show-stats

      # ---------- Windows ----------
      build-windows:
    runs-on: windows-latest
    env:
      VCPKG_FEATURE_FLAGS: binarycaching,manifests
      VCPKG_DEFAULT_TRIPLET: x64-windows-static-md

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: '**/vcpkg.json'

      - name: Configure (Windows)
        run: >
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64
          -DCMAKE_TOOLCHAIN_FILE=${env:VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake
          -DVCPKG_TARGET_TRIPLET=x64-windows-static-md
          -DCMAKE_BUILD_TYPE=RelWithDebInfo

      - name: Build (Windows)
        run: cmake --build build --config RelWithDebInfo --parallel

      - name: Test (Windows)
        run: ctest --test-dir build -C RelWithDebInfo --output-on-failure

      - name: Upload build artifacts (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: build-windows
          path: build/**
          if-no-files-found: ignore

      # ---------- Artifacts ----------
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: |
            build/**
          if-no-files-found: ignore

      - name: Upload sample outputs
        uses: actions/upload-artifact@v4
        with:
          name: sample-outputs-${{ matrix.os }}
          path: examples/outputs/*
          if-no-files-found: ignore
