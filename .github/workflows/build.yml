name: CI ‚Ä¢ Build & Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  ubuntu-build:
    name: üêß Ubuntu ‚Ä¢ Build & Test (with ccache)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      # Cache apt packages (optional but fast)

      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      # Install dependencies
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake ninja-build pkg-config ccache \
            libcurl4-openssl-dev libsqlite3-dev \
            libspdlog-dev libfmt-dev

      # Cache ccache
      - name: Setup ccache
        run: |
          echo "max_size = 2G" | sudo tee /etc/ccache.conf
          export PATH="/usr/lib/ccache:$PATH"
          echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          ccache --zero-stats

      # Cache ccache results
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt', '**/*.cpp', '**/*.hpp') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      # Configure (no manual CURL paths)
      
      - name: Configure
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DBUILD_EXAMPLES=ON \
            -DBUILD_DOCS=OFF \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

     
      # Build and test
      
      - name: Build
        run: cmake --build build --parallel

      - name: Test
        run: ctest --test-dir build --output-on-failure

      # Show ccache statistics
      - name: Show ccache stats
        if: always()
        run: ccache --show-stats

      # Upload artifacts
      - name: Upload Sample Outputs
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: SampleOutputs-Ubuntu
          path: build/sample_outputs/*.csv

  windows-build:
    name: ü™ü Windows ‚Ä¢ Build & Test (MSVC + vcpkg + sccache)
    runs-on: windows-latest

    env:
      VCPKG_FORCE_SYSTEM_BINARIES: 1
      VCPKG_USE_SYSTEM_NINJA: 1
      VCPKG_DISABLE_METRICS: 1
      VCPKG_DEFAULT_TRIPLET: x64-windows-static
      CMAKE_BUILD_TYPE: Release
      VCPKG_TARGET_TRIPLET: x64-windows-static
      CMAKE_MAKE_PROGRAM: C:\ninja\ninja.exe
      SCCACHE_LOG: error
      SCCACHE_DIR: C:\sccache
      CMAKE_VERBOSE_MAKEFILE: 1
      CMAKE_MESSAGE_LOG_LEVEL: VERBOSE
      VCPKG_FEATURE_FLAGS: "manifests,versions,registries"
      VCPKG_LOG_LEVEL: trace
      VCPKG_KEEP_ENV_VARS: PATH;INCLUDE;LIB;LIBPATH;VSCMD_ARG_TGT_ARCH;VSCMD_VER;Platform
      VCPKG_ENV_PASSTHROUGH: PATH;INCLUDE;LIB;LIBPATH
      CMAKE_BUILD_PARALLEL_LEVEL: 2

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # === Activate MSVC environment ===
      - name: Activate MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # === Install & Verify tools (in cmd) ===
      - name: Install + Verify tools
        shell: cmd
        run: |
          echo üõ†Ô∏è Installing Ninja...
          curl -L -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip
          mkdir C:\ninja
          tar -xf ninja.zip -C C:\ninja
          echo PATH=C:\ninja;%PATH%>> %GITHUB_ENV%
          echo üîé Verifying tools...
          where cl
          cl /Bv || exit 0
          C:\ninja\ninja.exe --version


      # === Cache for vcpkg ===
      #- name: Cache vcpkg
      #  uses: actions/cache@v4
      #  with:
      #    path: |
      #      vcpkg/installed
      #      vcpkg/buildtrees
      #      vcpkg/downloads
      #    key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
      #    restore-keys: |
      #      ${{ runner.os }}-vcpkg-

      # === Setup vcpkg manually (verified commit) ===
      - name: Setup vcpkg manually
        shell: cmd
        run: |
          echo üì• Cloning vcpkg...
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          git checkout 62324000504cdd27282f8275c99135cfb2bd1dc0          
          echo ‚öôÔ∏è Bootstrapping vcpkg...          
          set VCPKG_FORCE_SYSTEM_BINARIES=1
          set VCPKG_USE_SYSTEM_NINJA=1
          set PATH=C:\ninja;%PATH%
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          echo ‚öôÔ∏è Bootstrapping vcpkg...
          .\bootstrap-vcpkg.bat -disableMetrics -verbose
          echo ‚úÖ vcpkg bootstrapped successfully.

       # === Verify tools ===
      - name: üîç Verify compiler and Ninja
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          where cl
          cl /Bv
          where ninja
          ninja --version
          where link
          link /?


      - name: Configure (Windows)
        shell: cmd
        run: |
          echo üß© Configuring project with MSVC + Ninja + vcpkg...
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

          REM === Settings after MSVC activation ===
          set VCPKG_ROOT=%GITHUB_WORKSPACE%\vcpkg
          set VCTOOLS_BIN=%VCToolsInstallDir%bin\Hostx64\x64
          set PATH=C:\ninja;%VCTOOLS_BIN%;%VCPKG_ROOT%;%PATH%
          set VCPKG_NINJA_PATH=C:\ninja\ninja.exe
          set VCPKG_USE_SYSTEM_NINJA=1
          echo ‚úÖ Updated PATH:
          echo %PATH%
          where cl
          where link
          where ninja
          ninja --version
          link /?
          echo =====================

          cmake -S . -B build -G "Ninja" ^
            -DCMAKE_BUILD_TYPE=Release ^
            -DCMAKE_VERBOSE_MAKEFILE=ON ^
            -DCMAKE_MESSAGE_LOG_LEVEL=VERBOSE ^
            -DCMAKE_MAKE_PROGRAM=C:\\ninja\\ninja.exe ^
            -DCMAKE_TOOLCHAIN_FILE=%GITHUB_WORKSPACE%\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake ^
            -DVCPKG_TARGET_TRIPLET=x64-windows-static ^            
            -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=%GITHUB_WORKSPACE%\\vcpkg\\scripts\\toolchains\\windows.cmake ^
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
            -DCMAKE_C_COMPILER="C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.44.35207/bin/Hostx64/x64/cl.exe" ^
            -DCMAKE_CXX_COMPILER="C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.44.35207/bin/Hostx64/x64/cl.exe" ^            
            -DVCPKG_LOG_LEVEL=trace ^
            -DVCPKG_CMAKE_SYSTEM_NAME=Windows ^
            -DBUILD_EXAMPLES=ON ^           
            -DBUILD_DOCS=OFF --log-level=VERBOSE"
            

          echo === CMAKE CACHE DUMP ===
          type build\CMakeCache.txt || echo (no cache found)

      - name: Debug toolchain (MSVC + Ninja)
        shell: cmd
        run: |
          echo === PATH ===
          echo %PATH%
          where cl
          cl /Bv 
          where ninja          
          ninja --version

      - name: Build (Release)
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake --build build --config Release --parallel

      - name: Run Tests
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ctest --test-dir build --output-on-failure -V

      - name: Show sccache stats
        if: always()
        shell: pwsh
        run: sccache --show-stats

      - name: Upload Sample Outputs
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: SampleOutputs-Windows
          path: build/sample_outputs/*.csv

      - name: Upload Compiler Detection Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: CompilerDetectionLogs
          path: |
            vcpkg/buildtrees/detect_compiler/**/*.log

      - name: Upload vcpkg logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: vcpkg-logs
          path: vcpkg/buildtrees/**/*.log
      - name: Dump vcpkg + CMake logs (if failure)
        if: failure()
        shell: cmd
        run: |
          echo === vcpkg logs ===
          dir /s /b vcpkg\buildtrees\detect_compiler
          echo === detect_compiler logs ===
          type vcpkg\buildtrees\detect_compiler\config-x64-windows-static-rel-CMakeCache.txt.log || echo (missing)
          type vcpkg\buildtrees\detect_compiler\config-x64-windows-static-out.log || echo (missing)
          echo === cmake error logs ===
          type build\CMakeFiles\CMakeOutput.log || echo (no CMakeOutput.log)
          type build\CMakeFiles\CMakeError.log || echo (no CMakeError.log)

