name: CI ‚Ä¢ Build & Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  ubuntu-build:
    name: üêß Ubuntu ‚Ä¢ Build & Test (with ccache)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      # Cache apt packages (optional but fast)

      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      # Install dependencies
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake ninja-build pkg-config ccache \
            libcurl4-openssl-dev libsqlite3-dev \
            libspdlog-dev libfmt-dev

      # Cache ccache
      - name: Setup ccache
        run: |
          echo "max_size = 2G" | sudo tee /etc/ccache.conf
          export PATH="/usr/lib/ccache:$PATH"
          echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          ccache --zero-stats

      # Cache ccache results
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt', '**/*.cpp', '**/*.hpp') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      # Configure (no manual CURL paths)
      
      - name: Configure
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DBUILD_EXAMPLES=ON \
            -DBUILD_DOCS=OFF \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

     
      # Build and test
      
      - name: Build
        run: cmake --build build --parallel

      - name: Test
        run: ctest --test-dir build --output-on-failure
      
      # === Upload demo artifacts (CSV, JSON) ===

      # Show ccache statistics
      - name: Show ccache stats
        if: always()
        run: ccache --show-stats
      
      # === Generate and upload demo outputs (CSV, JSON) ===
      - name: Generate and Upload Demo Outputs
        if: success()
        run: |
          if [ -f ./build/examples/demo_db_logger_config ]; then
            echo "üß© Generating demo output files..."
            ./build/examples/demo_db_logger_config
          else
            echo "‚ö†Ô∏è Skipping demo run (binary not found)"
          fi
        shell: bash

      - name: Upload Demo Outputs
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: DemoOutputs-Ubuntu
          path: |
            build/demo_out.csv
            build/demo_out.json
            demo_out.csv
            demo_out.json
          if-no-files-found: warn


  ubuntu-tsan:
    name: üß† Ubuntu ‚Ä¢ ThreadSanitizer (TSan)
    runs-on: ubuntu-latest
    continue-on-error: true  # doesn't block merge, only reports errors

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # === Install dependencies ===
      - name: Install dependencies for TSan
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang cmake ninja-build ccache pkg-config \
            libcurl4-openssl-dev libsqlite3-dev \
            libspdlog-dev libfmt-dev

      # === Setup ccache ===
      - name: Setup ccache
        run: |
          echo "max_size = 2G" | sudo tee /etc/ccache.conf
          export PATH="/usr/lib/ccache:$PATH"
          echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          ccache --zero-stats

      # === Cache ccache ===
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ${{ runner.os }}-tsan-ccache-${{ hashFiles('**/CMakeLists.txt', '**/*.cpp', '**/*.hpp') }}
          restore-keys: |
            ${{ runner.os }}-tsan-ccache-

      # === Configure build with TSan ===
      - name: Configure (TSan)
        run: |
          cmake -S . -B build-tsan -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DENABLE_TSAN=ON \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DBUILD_EXAMPLES=OFF \
            -DBUILD_DOCS=OFF

      # === Build project with TSan ===
      - name: Build (TSan)
        run: cmake --build build-tsan --parallel

      # === Run tests under TSan ===
      - name: Run Tests (TSan)
        run: |
          echo "üß™ Running tests with ThreadSanitizer..."
          ASAN_OPTIONS=halt_on_error=0:detect_leaks=0 \
          TSAN_OPTIONS="halt_on_error=0 second_deadlock_stack=1 suppressions=${{ github.workspace }}/.tsan-suppressions.txt" \
          ctest --test-dir build-tsan --output-on-failure || echo "TSan run completed with warnings"

      # === Upload logs ===
      - name: Upload TSan reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ThreadSanitizer-Reports
          path: |
            build-tsan/Testing/Temporary/*.log
            build-tsan/*.tsan
          if-no-files-found: ignore

      # === Show ccache stats ===
      - name: Show ccache stats
        if: always()
        run: ccache --show-stats



  windows-build:
    name: ü™ü Windows ‚Ä¢ Build & Test (MSVC + vcpkg + sccache)
    runs-on: windows-latest

    env:
      VCPKG_FORCE_SYSTEM_BINARIES: 1
      VCPKG_USE_SYSTEM_NINJA: 1
      VCPKG_DISABLE_METRICS: 1
      VCPKG_DEFAULT_TRIPLET: x64-windows-static
      CMAKE_BUILD_TYPE: Release
      VCPKG_TARGET_TRIPLET: x64-windows-static
      CMAKE_MAKE_PROGRAM: C:\ninja\ninja.exe
      SCCACHE_DIR: C:\sccache
      SCCACHE_LOG: error      
      CMAKE_VERBOSE_MAKEFILE: 1
      CMAKE_MESSAGE_LOG_LEVEL: VERBOSE
      VCPKG_FEATURE_FLAGS: "manifests,versions,registries"
      VCPKG_LOG_LEVEL: trace
      VCPKG_KEEP_ENV_VARS: PATH;INCLUDE;LIB;LIBPATH;VSCMD_ARG_TGT_ARCH;VSCMD_VER;Platform
      VCPKG_ENV_PASSTHROUGH: PATH;INCLUDE;LIB;LIBPATH
      CMAKE_BUILD_PARALLEL_LEVEL: 2

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # === Activate MSVC environment ===
      - name: Activate MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # === Install & Verify tools (in cmd) ===
      - name: Install + Verify tools
        shell: cmd
        run: |
          echo üõ†Ô∏è Installing Ninja...
          curl -L -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip
          mkdir C:\ninja
          tar -xf ninja.zip -C C:\ninja
          echo PATH=C:\ninja;%PATH%>> %GITHUB_ENV%
          echo üîé Verifying tools...
          where cl
          cl /Bv || exit 0
          C:\ninja\ninja.exe --version
      
      - name: üß© Install sccache (Windows)
        shell: cmd
        run: |
          echo üì¶ Installing sccache...
          curl -L -o sccache.zip https://github.com/mozilla/sccache/releases/download/v0.8.2/sccache-v0.8.2-x86_64-pc-windows-msvc.zip
          mkdir C:\sccache
          tar -xf sccache.zip -C C:\sccache
          REM --- move binary one level up if unpacked into subfolder ---
          for /d %%D in (C:\sccache\sccache-v*) do (
              move %%D\sccache.exe C:\sccache\sccache.exe >nul 2>&1
          )
          echo PATH=C:\sccache;%PATH%>> %GITHUB_ENV%
          echo ‚úÖ sccache installed at C:\sccache
          dir C:\sccache
          C:\sccache\sccache.exe --version

          rmdir /s /q C:\sccache\sccache-v0.8.2-x86_64-pc-windows-msvc || echo (no subfolder to remove)

      # === Cache sccache ===
      - name: Cache sccache
        uses: actions/cache@v4
        with:
          path: C:\sccache
          key: ${{ runner.os }}-sccache-${{ hashFiles('**/*.cpp', '**/*.hpp', '**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-sccache-

      # === Reset sccache stats ===
      - name: Reset sccache stats
        if: always()
        shell: cmd
        run: C:\sccache\sccache.exe --zero-stats || echo (no stats to reset)

      # === Cache for vcpkg ===
      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            vcpkg/installed
            vcpkg/buildtrees
            vcpkg/downloads
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      # === Setup vcpkg manually (verified commit) ===
      - name: Setup vcpkg manually
        shell: cmd
        run: |
          echo üì• Preparing vcpkg...

          REM === Check for existing vcpkg directory ===
          if exist vcpkg (
            echo ‚ö†Ô∏è Found existing vcpkg directory, cleaning it before fresh clone...
            rmdir /s /q vcpkg
          )

          REM === Clone and checkout specific commit ===
          git clone https://github.com/microsoft/vcpkg.git
          if %ERRORLEVEL% NEQ 0 (
            echo ‚ùå Git clone failed!
            exit /b %ERRORLEVEL%
          )
          cd vcpkg
          git checkout 62324000504cdd27282f8275c99135cfb2bd1dc0
          if %ERRORLEVEL% NEQ 0 (
            echo ‚ùå Git checkout failed!
            exit /b %ERRORLEVEL%
          )

          REM === Prepare environment for bootstrap ===
          echo ‚öôÔ∏è Bootstrapping vcpkg...
          set VCPKG_FORCE_SYSTEM_BINARIES=1
          set VCPKG_USE_SYSTEM_NINJA=1
          set PATH=C:\ninja;%PATH%
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

          REM === Run bootstrap script ===
          .\bootstrap-vcpkg.bat -disableMetrics -verbose
          if %ERRORLEVEL% NEQ 0 (
            echo ‚ùå vcpkg bootstrap failed!
            exit /b %ERRORLEVEL%
          )

          echo ‚úÖ vcpkg bootstrapped successfully.
          dir /b
          echo === VCPKG version check ===
          .\vcpkg version


       # === Verify tools ===
      - name: üîç Verify compiler and Ninja
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          where cl
          cl /Bv
          where ninja
          ninja --version
          where link
          link /? || exit 0
          where sccache
          C:\sccache\sccache.exe --show-stats
          w
      # === Configure ===
      - name: Configure (Windows)
        shell: cmd
        run: |
          echo üß© Configuring project with MSVC + Ninja + vcpkg...
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

          REM === Settings after MSVC activation ===
          set VCPKG_ROOT=%GITHUB_WORKSPACE%\vcpkg
          set VCTOOLS_BIN=%VCToolsInstallDir%bin\Hostx64\x64
          set PATH=C:\ninja;%VCTOOLS_BIN%;%VCPKG_ROOT%;%PATH%
          set VCPKG_NINJA_PATH=C:\ninja\ninja.exe
          set VCPKG_USE_SYSTEM_NINJA=1
          echo ‚úÖ Updated PATH:
          echo %PATH%
          where cl
          where link
          where ninja
          ninja --version
          link /? || exit 0
          echo =====================

          cmake -S . -B build -G "Ninja" ^
            -DCMAKE_BUILD_TYPE=Release ^
            -DCMAKE_VERBOSE_MAKEFILE=ON ^
            -DCMAKE_MESSAGE_LOG_LEVEL=VERBOSE ^
            -DCMAKE_MAKE_PROGRAM=C:\\ninja\\ninja.exe ^
            -DCMAKE_TOOLCHAIN_FILE=%GITHUB_WORKSPACE%\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake ^
            -DVCPKG_TARGET_TRIPLET=x64-windows-static ^            
            -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=%GITHUB_WORKSPACE%\\vcpkg\\scripts\\toolchains\\windows.cmake ^
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
            -DCMAKE_C_COMPILER="C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.44.35207/bin/Hostx64/x64/cl.exe" ^
            -DCMAKE_CXX_COMPILER="C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.44.35207/bin/Hostx64/x64/cl.exe" ^            
            -DVCPKG_LOG_LEVEL=trace ^
            -DVCPKG_CMAKE_SYSTEM_NAME=Windows ^
            -DBUILD_EXAMPLES=ON ^           
            -DBUILD_DOCS=OFF --log-level=VERBOSE"
            

          echo === CMAKE CACHE DUMP ===
          type build\CMakeCache.txt || echo (no cache found)

      - name: Debug toolchain (MSVC + Ninja)
        shell: cmd
        run: |
          echo === PATH ===
          echo %PATH%
          where cl
          cl /Bv 
          where ninja          
          ninja --version

      - name: Build (Release)
        shell: cmd
        run: |
          echo üèóÔ∏è Building QuantumGradesApp...
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          if not exist build (
            echo ‚ö†Ô∏è Build folder not found, running CMake configure first...
            cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=%GITHUB_WORKSPACE%\vcpkg\scripts\buildsystems\vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows-static
          )
          cmake --build build --config Release --parallel

      # === Run tests ===
      - name: Run Tests
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ctest --test-dir build --output-on-failure -V

       # === Show sccache statistics ===
      - name: Show sccache stats
        if: always()
        shell: cmd
        run: C:\sccache\sccache.exe --show-stats || echo (no sccache found)
      
      # === Generate and upload demo outputs (CSV, JSON) ===
      - name: Generate and Upload Demo Outputs
        if: success()
        shell: cmd
        run: |
          if exist build\demo_db_logger_config.exe (
            echo üß© Generating demo output files...
            build\demo_db_logger_config.exe
          ) else (
            echo ‚ö†Ô∏è Skipping demo run (binary not found)
          )

      - name: Upload Demo Outputs
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: DemoOutputs-Windows
          path: |
            build\demo_out.csv
            build\demo_out.json
          if-no-files-found: warn


      - name: Upload Compiler Detection Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: CompilerDetectionLogs
          path: |
            vcpkg/buildtrees/detect_compiler/**/*.log

      - name: Upload vcpkg logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: vcpkg-logs
          path: vcpkg/buildtrees/**/*.log
      - name: Dump vcpkg + CMake logs (if failure)
        if: failure()
        shell: cmd
        run: |
          echo === vcpkg logs ===
          dir /s /b vcpkg\buildtrees\detect_compiler
          echo === detect_compiler logs ===
          type vcpkg\buildtrees\detect_compiler\config-x64-windows-static-rel-CMakeCache.txt.log || echo (missing)
          type vcpkg\buildtrees\detect_compiler\config-x64-windows-static-out.log || echo (missing)
          echo === cmake error logs ===
          type build\CMakeFiles\CMakeOutput.log || echo (no CMakeOutput.log)
          type build\CMakeFiles\CMakeError.log || echo (no CMakeError.log)

