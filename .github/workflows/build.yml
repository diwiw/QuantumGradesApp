name: CI ‚Ä¢ Build & Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  ubuntu-build:
    name: üêß Ubuntu ‚Ä¢ Build & Test (with ccache)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      # Cache apt packages (optional but fast)

      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      # Install dependencies
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake ninja-build pkg-config ccache \
            libcurl4-openssl-dev libsqlite3-dev \
            libspdlog-dev libfmt-dev

      # Cache ccache
      - name: Setup ccache
        run: |
          echo "max_size = 2G" | sudo tee /etc/ccache.conf
          export PATH="/usr/lib/ccache:$PATH"
          echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          ccache --zero-stats

      # Cache ccache results
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt', '**/*.cpp', '**/*.hpp') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      # Configure (no manual CURL paths)
      
      - name: Configure
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DBUILD_EXAMPLES=ON \
            -DBUILD_DOCS=OFF \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

     
      # Build and test
      
      - name: Build
        run: cmake --build build --parallel

      - name: Test
        run: ctest --test-dir build --output-on-failure

      # Show ccache statistics
      - name: Show ccache stats
        if: always()
        run: ccache --show-stats

      # Upload artifacts
      - name: Upload Sample Outputs
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: SampleOutputs-Ubuntu
          path: build/sample_outputs/*.csv

  windows-build:
    name: ü™ü Windows ‚Ä¢ Build & Test (MSVC + vcpkg + sccache)
    runs-on: windows-latest

    steps:
      # === Source Checkout ===
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Ninja (manual)
        shell: pwsh
        run: |
          $ninjaDir = "C:\ninja"
          Invoke-WebRequest -Uri https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip -OutFile ninja.zip
          Expand-Archive ninja.zip -DestinationPath $ninjaDir
          echo "C:\ninja" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append


      # === Activate MSVC environment BEFORE vcpkg ===
      - name: Activate MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # === Verify tools in PATH ===
      - name: Verify tools
        shell: pwsh
        run: |
          Get-Command ninja
          Get-Command pwsh
          Get-Command cl

      # === Verify MSVC toolchain ===
      - name: Verify MSVC compiler
        shell: pwsh
        run: |
          # Show where the compiler comes from (this returns exit code 0)
          where cl

          # Print full compiler banner but force success even if cl returns non-zero
          # (cl /Bv ends with D8003 by design when no source file is provided)
          cmd /c "cl /Bv & exit /b 0"

          # Export C/C++ compiler for downstream steps (CMake, vcpkg, etc.)
          # "CC=cl.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          # "CXX=cl.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      

      # === Cache for vcpkg ===
      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            vcpkg/installed
            vcpkg/buildtrees
            vcpkg/downloads
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      # === Setup vcpkg manually (verified commit) ===
      - name: Setup vcpkg manually
        shell: cmd
        run: |
          Write-Host "üì• Cloning vcpkg..."
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          git checkout 62324000504cdd27282f8275c99135cfb2bd1dc0
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          Write-Host "‚öôÔ∏è Bootstrapping vcpkg..."
          .\bootstrap-vcpkg.bat -disableMetrics

          .\vcpkg.exe install --triplet x64-windows-static
          

        env:
          VCPKG_DEFAULT_TRIPLET: x64-windows-static
          VCPKG_DISABLE_METRICS: 1         

  
      # === Configure (CMake + Ninja + MSVC) ===
      - name: Configure (Windows)
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake -S . -B build -G "Ninja" ^
            -DCMAKE_BUILD_TYPE=Release ^
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake" ^
            -DVCPKG_TARGET_TRIPLET=x64-windows-static ^
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
            -DBUILD_EXAMPLES=ON ^
            -DBUILD_DOCS=OFF


      - name: Build (Release)
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake --build build --config Release --parallel

      - name: Run Tests
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ctest --test-dir build --output-on-failure -V


      # === Show sccache stats ===
      - name: Show sccache stats
        if: always()
        run: sccache --show-stats

      # === Upload artifacts (e.g. CSV results) ===
      - name: Upload Sample Outputs
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: SampleOutputs-Windows
          path: build/sample_outputs/*.csv
