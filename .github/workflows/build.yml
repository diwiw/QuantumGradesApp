name: CI • Build & Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:

  ubuntu-build:
    name: 🐧 Ubuntu • Build & Test (with ccache)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake ninja-build pkg-config ccache \
            libcurl4-openssl-dev libsqlite3-dev \
            libspdlog-dev libfmt-dev

      - name: Setup ccache
        run: |
          echo "max_size = 1G" | sudo tee /etc/ccache.conf
          export PATH="/usr/lib/ccache:$PATH"
          echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt', '**/*.cpp', '**/*.hpp') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Verify libcurl
        run: |
          pkg-config --cflags --libs libcurl || true
          ls -l /usr/include/curl || true
          ls -l /usr/lib/x86_64-linux-gnu/libcurl* || true

      - name: Configure
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DBUILD_EXAMPLES=ON \
            -DBUILD_DOCS=OFF \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCURL_LIBRARY=/usr/lib/x86_64-linux-gnu/libcurl.so \
            -DCURL_INCLUDE_DIR=/usr/include/curl

      - name: Build
        run: cmake --build build --parallel

      - name: Test
        run: ctest --test-dir build --output-on-failure

      - name: Show ccache stats
        if: always()
        run: ccache -s || true

      - name: Upload Sample Outputs
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: SampleOutputs-Ubuntu
          path: build/sample_outputs/*.csv

  windows-build:
    name: 🪟 Windows • Build & Test
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Force MSYS2 stable mirror (Windows)
        shell: pwsh
        run: |
          Write-Host "Using mirror.msys2.org to avoid 404s"
          $msysDir = "$env:VCPKG_ROOT\downloads\tools\msys2"
          if (Test-Path $msysDir) {
            Get-ChildItem -Directory $msysDir | ForEach-Object {
              $pacmanDir = Join-Path $_.FullName "etc\pacman.d"
              if (Test-Path $pacmanDir) {
                Write-Host "Fixing mirrors in $pacmanDir"
                @"
          Server = https://mirror.msys2.org/mingw/i686
          "@ | Out-File -Encoding ASCII -FilePath (Join-Path $pacmanDir "mirrorlist.mingw32") -Force
                        @"
          Server = https://mirror.msys2.org/mingw/x86_64
          "@ | Out-File -Encoding ASCII -FilePath (Join-Path $pacmanDir "mirrorlist.mingw64") -Force
                        @"
          Server = https://mirror.msys2.org/msys/$arch
          "@ | Out-File -Encoding ASCII -FilePath (Join-Path $pacmanDir "mirrorlist.msys") -Force
                      }
                    }
                  } else {
                    Write-Host "MSYS2 not yet installed by vcpkg — skipping mirror fix."
                  }

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: '**/vcpkg.json'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          doNotCache: false
          doNotUpdateVcpkg: false
          runVcpkgInstall: true
        env:
          VCPKG_DEFAULT_TRIPLET: x64-windows-static
          VCPKG_DOWNLOAD_MSYS2: 0
          VCPKG_DISABLE_METRICS: 1

      - name: Configure (Windows)
        run: cmake -S . -B build -G "Ninja" `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake `
          -DVCPKG_TARGET_TRIPLET=x64-windows-static `
          -DBUILD_EXAMPLES=ON `
          -DBUILD_DOCS=OFF

      - name: Build
        run: cmake --build build --parallel

      - name: Run Tests
        run: ctest --test-dir build --output-on-failure

      - name: Upload Sample Outputs
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: SampleOutputs-Windows
          path: build/sample_outputs/*.csv

    