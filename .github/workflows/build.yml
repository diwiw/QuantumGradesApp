name: CI • Build & Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  ubuntu-build:
    name: 🐧 Ubuntu • Build & Test (with ccache)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      # Cache apt packages (optional but fast)

      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      # Install dependencies
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake ninja-build pkg-config ccache \
            libcurl4-openssl-dev libsqlite3-dev \
            libspdlog-dev libfmt-dev

      # Cache ccache
      - name: Setup ccache
        run: |
          echo "max_size = 2G" | sudo tee /etc/ccache.conf
          export PATH="/usr/lib/ccache:$PATH"
          echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          ccache --zero-stats

      # Cache ccache results
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt', '**/*.cpp', '**/*.hpp') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      # Configure (no manual CURL paths)
      
      - name: Configure
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DBUILD_EXAMPLES=ON \
            -DBUILD_DOCS=OFF \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

     
      # Build and test
      
      - name: Build
        run: cmake --build build --parallel

      - name: Test
        run: ctest --test-dir build --output-on-failure

      # Show ccache statistics
      - name: Show ccache stats
        if: always()
        run: ccache --show-stats

      # Upload artifacts
      - name: Upload Sample Outputs
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: SampleOutputs-Ubuntu
          path: build/sample_outputs/*.csv

  windows-build:
    name: 🪟 Windows • Build & Test (MSVC + sccache)
    runs-on: windows-latest

    steps:
      # === Source Checkout ===
      - name: Checkout
        uses: actions/checkout@v4

      # === Cache vcpkg ===
      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            vcpkg/installed
            vcpkg/buildtrees
            vcpkg/downloads
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      # === Setup vcpkg (manifest mode) ===
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: '**/vcpkg.json'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          runVcpkgFormatString: >
            ["install", "--recurse", "--clean-after-build", "--triplet", "x64-windows-static"]
        env:
          VCPKG_DEFAULT_TRIPLET: x64-windows-static
          VCPKG_DISABLE_METRICS: "1"
          VCPKG_DOWNLOAD_MSYS2: "0"

      # === MSVC Environment Setup ===
      - name: Setup MSVC Environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # === Install and Configure sccache ===
      - name: Setup sccache
        shell: pwsh
        run: |
          choco install sccache -y
          echo "C:\\ProgramData\\chocolatey\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "SCCACHE_DIR=${{ runner.temp }}\\.sccache" >> $env:GITHUB_ENV
          echo "SCCACHE_CACHE_SIZE=1G" >> $env:GITHUB_ENV
          echo "CMAKE_CXX_COMPILER_LAUNCHER=sccache" >> $env:GITHUB_ENV

      # === Cache for sccache ===
      - name: Cache sccache
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}\.sccache
          key: ${{ runner.os }}-sccache-${{ hashFiles('**/*.cpp', '**/*.hpp') }}
          restore-keys: |
            ${{ runner.os }}-sccache-

      # === Project Configuration (CMake + MSVC) ===
      - name: Configure (Windows)
        shell: pwsh
        run: |
          $toolchain = Join-Path "${{ github.workspace }}" "vcpkg\\scripts\\buildsystems\\vcpkg.cmake"
          cmake -S . -B build -G "Ninja" `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE="$toolchain" `
            -DVCPKG_TARGET_TRIPLET=x64-windows-static `
            -DCMAKE_C_COMPILER=cl `
            -DCMAKE_CXX_COMPILER=cl `
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache `
            -DBUILD_EXAMPLES=ON `
            -DBUILD_DOCS=OFF

      # === Build (Release) ===
      - name: Build
        run: cmake --build build --config Release --parallel

      # === Unit Tests ===
      - name: Run Tests
        run: ctest --test-dir build --config Release --output-on-failure

      # === Cache Compilation Statistics ===
      - name: Show sccache stats
        if: always()
        run: sccache --show-stats

      # === Artifacts (e.g. CSV from examples) ===
      - name: Upload Sample Outputs
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: SampleOutputs-Windows
          path: build/sample_outputs/*.csv
